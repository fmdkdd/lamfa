# -*- org-confirm-babel-evaluate: nil; org-babel-use-quick-and-dirty-noweb-expansion: t -*-

#+PROPERTY: header-args :noweb yes

Lambda-calculus interpreter done in the style of Narcissus: module pattern,
recursive descent, switch case for ~execute~, and ~evaluateEach~ for the facet
version.

* Lambda standard
#+NAME: lambda-standard/ast-nodes
#+BEGIN_SRC js
function bot(e) { return {type: 'BOT', e} }
function c(e) { return {type: 'CONST', e} }
function v(e) { return {type: 'VAR', e} }
function fun(argName, body) { return {type: 'FUN', argName, body} }
function app(fun, arg) { return {type: 'APP', fun, arg} }
function ref(e) { return {type: 'REF', e} }
function deref(e) { return {type: 'DEREF', e} }
function assign(left, right) { return {type: 'ASSIGN', left, right} }
#+END_SRC

#+NAME: lambda-standard/interpreter
#+BEGIN_SRC js
var interpreter = (function(){
  var bottom = {
    toString() { return 'BOT' },
    _call(arg, context) { return this },
    deref(context) { return this },
  }

  function Address(a) { this.a = a }

  Address.prototype.deref = function(context) {
    return context.store.retrieve(this.a)
  }

  function ExecutionContext(parent) {
    if (parent) {
      this.scope = Object.create(parent.scope)
      this.store = parent.store
    }
    else {
      this.scope = {}
      this.store = new Store()
    }
  }

  function Store() { this.refs = [] }

  Store.prototype.add = function(value) {
    this.refs.push(value)
    return this.refs.length - 1
  }

  Store.prototype.retrieve = function(addr) {
    return this.refs[addr]
  }

  function FunctionObject(node, scope) {
    this.node = node
    this.scope = scope
  }

  FunctionObject.prototype._call = function(arg, context) {
    var x = new ExecutionContext(context)
    x.scope[this.node.argName] = arg
    return execute(this.node.body, x)
  }

  function execute(node, context) {
    var v, f, a, x, r

    switch (node.type) {
    case 'BOT':
      v = bottom
      break

    case 'CONST':
      v = node.e
      break

    case 'VAR':
      v = context.scope[node.e]
      break

    case 'FUN':
      v = new FunctionObject(node, context.scope)
      break

    case 'APP':
      f = execute(node.fun, context)
      a = execute(node.arg, context)
      v = f._call(a, context)
      break

    case 'REF':
      r = execute(node.e, context)
      a = context.store.add(r)
      v = new Address(a)
      break

    case 'DEREF':
      a = execute(node.e, context)
      v = a.deref(context)
      break
    }

    return v
  }

  function run(ast) {
    return execute(ast, new ExecutionContext())
  }

  return {
    run: run,
    bottom: bottom,
  }
}())
#+END_SRC

#+BEGIN_SRC js :results output
<<lambda-standard/ast-nodes>>
<<lambda-standard/interpreter>>

print(interpreter.run(app(fun('x', v('x')), c(42))) === 42)
print(interpreter.run(bot()) === interpreter.bottom)
print(interpreter.run(app(bot(), c(42))) === interpreter.bottom)
print(interpreter.run(app(fun('x', deref(v('x'))), ref(c(42)))) === 42)
print(interpreter.run(deref(bot())) === interpreter.bottom)
#+END_SRC

#+RESULTS:
: true
: true
: true
: true
: true

* Lambda facet
#+NAME: lambda-facet/ast-nodes
#+BEGIN_SRC js
function bot(e) { return {type: 'BOT', e} }
function c(e) { return {type: 'CONST', e} }
function v(e) { return {type: 'VAR', e} }
function fun(argName, body) { return {type: 'FUN', argName, body} }
function app(fun, arg) { return {type: 'APP', fun, arg} }
function ref(e) { return {type: 'REF', e} }
function deref(e) { return {type: 'DEREF', e} }
function assign(left, right) { return {type: 'ASSIGN', left, right} }
#+END_SRC

#+NAME: lambda-facet/facet-definitions
#+BEGIN_SRC js
function Facet(k, vh, vl) {
  this.k = k
  this.vh = vh
  this.vl = vl
}

function constructFacet(pc, vh, vl) {
  if (pc.length === 0)
    return vh

  var k = pc[0]
  var rest = pc.slice(1)

  if (pc[0] > 0)
    return new Facet(k, constructFacet(rest, vh, vl), vl)
  else
    return new Facet(-k, vl, constructFacet(rest, vh, vl))
}

Facet.prototype.toString = function() {
  return `<${this.k} ? ${this.vh} : ${this.vl}>`
}

function evaluateEach(v, x, f) {
  var vh, vl
  var pc = x.pc

  if (v instanceof Facet) {
    if (v.k in x.pc)
      return evaluateEach(v.vh, x, f)
    else if (-v.k in x.pc)
      return evaluateEach(v.vl, x, f)
    else {
      x.pc[v.k] = true
      vh = evaluateEach(v.vh, x, f)
      x.pc[-v.k] = true
      vl = evaluateEach(v.vl, x, f)
      x.pc = pc

      return new Facet(v.k, vh, vl)
    }
  }
  else
    return f(v, x)
}
#+END_SRC

#+NAME: lambda-facet/interpreter
#+BEGIN_SRC js
var interpreter = (function(){
  var bottom = {
    toString() { return 'BOT' },
    _call(arg, context) { return this },
    deref(context) { return this },
  }

  function Address(a) { this.a = a }

  Address.prototype.deref = function(context) {
    return context.store.retrieve(this.a)
  }

  function ExecutionContext(parent) {
    if (parent) {
      this.scope = Object.create(parent.scope)
      this.store = parent.store
      this.pc = parent.pc
    }
    else {
      this.scope = {}
      this.store = new Store()
      this.pc = []
    }
  }

  function Store() { this.refs = [] }

  Store.prototype.add = function(value) {
    this.refs.push(value)
    return this.refs.length - 1
  }

  Store.prototype.retrieve = function(addr) {
    return this.refs[addr]
  }

  function FunctionObject(node, scope) {
    this.node = node
    this.scope = scope
  }

  FunctionObject.prototype.toString = function() {
    return '<func>'
  }

  FunctionObject.prototype._call = function(arg, context) {
    var x = new ExecutionContext(context)
    x.scope[this.node.argName] = arg
    return execute(this.node.body, x)
  }

  function execute(node, context) {
    var v, f, a, x, r

    switch (node.type) {
    case 'BOT':
      v = bottom
      break

    case 'CONST':
      v = node.e
      break

    case 'VAR':
      v = context.scope[node.e]
      break

    case 'FUN':
      v = new FunctionObject(node, context.scope)
      break

    case 'APP':
      f = execute(node.fun, context)
      a = execute(node.arg, context)
      v = evaluateEach(f, context, (f, x) => f._call(a, x))
      break

    case 'REF':
      r = execute(node.e, context)
      a = context.store.add(r)
      v = new Address(a)
      v = constructFacet(context.pc, v, bottom)
      break

    case 'DEREF':
      a = execute(node.e, context)
      v = evaluateEach(a, context, (a, x) => a.deref(x))
      break
    }

    return v
  }

  function run(ast) {
    return execute(ast, new ExecutionContext())
  }

  function runWithPC(ast, pc) {
    var x = new ExecutionContext()
    x.pc = pc
    return execute(ast, x)
  }

  return {
    run: run,
    runWithPC: runWithPC,
    bottom: bottom,
  }
}())
#+END_SRC

#+BEGIN_SRC js :results output
<<lambda-facet/ast-nodes>>
<<lambda-facet/facet-definitions>>
<<lambda-facet/interpreter>>

print(interpreter.run(app(fun('x', v('x')), c(42))) === 42)
print(interpreter.run(bot()) === interpreter.bottom)
print(interpreter.run(app(bot(), c(42))) === interpreter.bottom)
print(interpreter.run(app(fun('x', deref(v('x'))), ref(c(42)))) === 42)
print(interpreter.run(deref(bot())) === interpreter.bottom)

print(interpreter.runWithPC(
  app(fun('x', deref(v('x'))),
      ref(c(42))),
  [1]))
#+END_SRC

#+RESULTS:
: true
: true
: true
: true
: true
: <1 ? 42 : BOT>


* Diff between the two

#+BEGIN_SRC js :tangle lambda-standard.js
<<lambda-standard/ast-nodes>>
<<lambda-standard/interpreter>>
#+END_SRC

#+BEGIN_SRC js :tangle lambda-facets.js
<<lambda-facet/ast-nodes>>
<<lambda-facet/facet-definitions>>
<<lambda-facet/interpreter>>
#+END_SRC

# Need to call org-babel-tangle manually before updating the diff.
#+BEGIN_SRC sh :results output :wrap SRC diff
diff lambda-standard.js lambda-facets.js; exit 0
#+END_SRC

#+RESULTS:
#+BEGIN_SRC diff
8a9,53
> function Facet(k, vh, vl) {
>   this.k = k
>   this.vh = vh
>   this.vl = vl
> }
>
> function constructFacet(pc, vh, vl) {
>   if (pc.length === 0)
>     return vh
>
>   var k = pc[0]
>   var rest = pc.slice(1)
>
>   if (pc[0] > 0)
>     return new Facet(k, constructFacet(rest, vh, vl), vl)
>   else
>     return new Facet(-k, vl, constructFacet(rest, vh, vl))
> }
>
> Facet.prototype.toString = function() {
>   return `<${this.k} ? ${this.vh} : ${this.vl}>`
> }
>
> function evaluateEach(v, x, f) {
>   var vh, vl
>   var pc = x.pc
>
>   if (v instanceof Facet) {
>     if (v.k in x.pc)
>       return evaluateEach(v.vh, x, f)
>     else if (-v.k in x.pc)
>       return evaluateEach(v.vl, x, f)
>     else {
>       x.pc[v.k] = true
>       vh = evaluateEach(v.vh, x, f)
>       x.pc[-v.k] = true
>       vl = evaluateEach(v.vl, x, f)
>       x.pc = pc
>
>       return new Facet(v.k, vh, vl)
>     }
>   }
>   else
>     return f(v, x)
> }
25a71
>       this.pc = parent.pc
29a76
>       this.pc = []
48a96,99
>   FunctionObject.prototype.toString = function() {
>     return '<func>'
>   }
>
78c129
<       v = f._call(a, context)
---
>       v = evaluateEach(f, context, (f, x) => f._call(a, x))
84a136
>       v = constructFacet(context.pc, v, bottom)
89c141
<       v = a.deref(context)
---
>       v = evaluateEach(a, context, (a, x) => a.deref(x))
99a152,157
>   function runWithPC(ast, pc) {
>     var x = new ExecutionContext()
>     x.pc = pc
>     return execute(ast, x)
>   }
>
101a160
>     runWithPC: runWithPC,
#+END_SRC
