0a1,53
> Set.prototype.union = function(elem) {
>   let n = new Set(this);
>   n.add(elem);
>   return n;
> }
> 
> function mk_facet(pc, v1, v2) {
>   if (pc.size === 0)
>     return v1;
> 
>   let [k, ...rest] = pc;
>   rest = new Set(rest);
> 
>   if (k > 0)
>     return facet(k, mk_facet(rest, v1, v2), v2);
>   else
>     return facet(k, v2, mk_facet(rest, v1, v2));
> }
> 
> function facet(k, vh, vl) {
>   return {
>     eval_apply(σ, pc, v2) {
>       if (pc.has(k)) {
>         return vh.eval_apply(σ, pc, v2);
>       }
> 
>       else if (pc.has(-k)) {
>         return vl.eval_apply(σ, pc, v2);
>       }
> 
>       else {
>         let [σ1, vh1] = vh.eval_apply(σ, pc.union(k), v2);
>         let [σ2, vl1] = vl.eval_apply(σ1, pc.union(-k), v2);
>         return [ σ2, mk_facet(k, vh1, vl1) ];
>       }
>     },
> 
>     eval_deref(σ, pc) {
>       if (pc.has(k))
>         return vh.eval_deref(σ, pc);
>       else if (pc.has(-k))
>         return vl.eval_deref(σ, pc);
>       else
>         return mk_facet(k, vh.eval_deref(σ, pc), vl.eval_deref(σ, pc));
>     },
> 
>     eval_assign(σ, pc, v) {
>       let σ1 = vh.eval_assign(σ, pc.union(k), v);
>       return vl.eval_assign(σ1, pc.union(-k), v);
>     }
>   };
> }
> 
31c84
<     eval_apply(σ, v) {
---
>     eval_apply(σ, pc, v) {
34c87
<       return e.eval(σ, θ1);
---
>       return e.eval(σ, θ1, pc);
41c94
<     eval(σ, θ) {
---
>     eval(σ, θ, pc) {
49c102
<     eval(σ, θ) {
---
>     eval(σ, θ, pc) {
57c110
<     eval(σ, θ) {
---
>     eval(σ, θ, pc) {
65,68c118,121
<     eval(σ, θ) {
<       let [σ1, v1] = e1.eval(σ, θ);
<       let [σ2, v2] = e2.eval(σ1, θ);
<       return v1.eval_apply(σ2, v2);
---
>     eval(σ, θ, pc) {
>       let [σ1, v1] = e1.eval(σ, θ, pc);
>       let [σ2, v2] = e2.eval(σ1, θ, pc);
>       return v1.eval_apply(σ2, pc, v2);
75,76c128,129
<     eval(σ, θ) {
<       let [σ1, v] = e.eval(σ, θ);
---
>     eval(σ, θ, pc) {
>       let [σ1, v] = e.eval(σ, θ, pc);
79c132
<       σ2[a] = v;
---
>       σ2[a] = mk_facet(pc, v, bottom);
87,89c140,142
<     eval(σ, θ) {
<       let [σ1, v] = e.eval(σ, θ);
<       return [ σ1, v.eval_deref(σ1, v) ];
---
>     eval(σ, θ, pc) {
>       let [σ1, v] = e.eval(σ, θ, pc);
>       return [ σ1, v.eval_deref(σ1, pc, v) ];
96,99c149,152
<     eval(σ, θ) {
<       let [σ1, v1] = e1.eval(σ, θ);
<       let [σ2, v2] = e2.eval(σ1, θ);
<       return [ v1.eval_assign(σ2, v1, v2), v2 ];
---
>     eval(σ, θ, pc) {
>       let [σ1, v1] = e1.eval(σ, θ, pc);
>       let [σ2, v2] = e2.eval(σ1, θ, pc);
>       return [ v1.eval_assign(σ2, pc, v1, v2), v2 ];
104,105c157,159
< function interpretProgram(AST, env = {}, store = {}) {
<   return AST.eval(env, store);
---
> function interpretProgram(AST, env = {}, store = {}, pc = []) {
>   let pc = new Set(pc);
>   return AST.eval(env, store, pc);
111c165,166
<       ref(c(42)))
---
>       ref(c(42))),
>   {}, {}, [1]
